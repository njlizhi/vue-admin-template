day01

简洁版: https://github.com/PanJiaChen/vue-admin-template
加强版: https://github.com/PanJiaChen/vue-element-admin

前台项目和后台项目介绍

项目最终介绍及项目模板的介绍

模板代码各个文件的作用



一、先写登录和退出登录


	1、按照之前的思路先搞login静态页面
		找到views当中login组件
		修改登录二字
		添加背景图片
		配置路由（路由当中已经配置好登录的路由了）
		使用的话，是通过编程式导航在前置守卫当中自动使用的，不需要关心

	2、删除不需要的东西
		删除api里面不需要的
		删除路由当中不需要的
		删除views当中不需要的
		不用删除store当中的



	3、完成login登录的动态请求
		完成输入的用户名和密码的验证规则修改


		
	4、修改axios二次封装文件  
		添加token需要修改   X-Token改为token
		请求成功里面的code需要添加不等于200的情况，if (res.code !== 20000 && res.code !== 200)要警告  


	5、修改代理 
		禁用mock数据
		添加代理

	
	6、修改api接口user当中登录相关请求函数的接口为真实接口  
		只需要把url改过来即可

	7、修改store当中用户登录、token校验和退出相关的代码    
		其实代码可以什么都不动，但是要看懂

	8、在login界面当中发请求（这里不需要修改，已经写好了）

	9、把nav当中右侧下拉当中改为首页和退出登录


二、书写品牌、属性、spu\sku （从头开始练习增删改查功能）
	1>、所有的商品相关路由组件三大步（定义  注册（先常量注册，后面需要修改）  使用）
	注意：需要修改面包屑当中第一项显示的默认值（把英文改为中文‘首页’）

		{
    			path:'/product',
    			component:Layout,
    			name:'Product',
    			redirect:'/product/trademark/list',
    			meta: { title: '商品管理', icon: 'el-icon-s-shop' },
    			children:[
      				{
        				name:'Trademark',
        				path:'trademark/list',
        				component:() => import('@/views/product/trademark/List'),
        				meta: { title: '品牌管理'},
      				},
      				{
        				name:'Attr',
        				path:'attr/list',
        				component:() => import('@/views/product/attr/List'),
        				meta: { title: '属性管理'},
      				},
      				{
        				name:'Sku',
        				path:'sku/list',
        				component:() => import('@/views/product/sku/List'),
        				meta: { title: 'sku管理'},
      				},
      				{
        				name:'Spu',
        				path:'spu/list',
        				component:() => import('@/views/product/spu/List'),
        				meta: { title: 'spu管理'},
      				},
    			]
		},




	2>、和之前的一样（5天）

三、品牌管理增删改查业务逻辑
	
    列表页（查）
	1、先搞静态页面   参考已完成的页面自己去使用element-ui去搭
	 	table写法
      			先写eltable 回车
      			有几列就复制几个列
      			先把动态数据属性data干掉
      			有边框得添加table的border属性
      			每个列的width控制列的宽度
      			每个列的label控制这个列的名称
      			想让那个列居中，那么哪个列需要添加align="center"
      			那个列是序号，需要添加type = "index"
	 	pagination写法
			关注怎么居中，需要添加style=“text-align:center”

	 	中间缝隙20px 给table添加上下外边距20px


	2、再搞动态页面
		
		api写法 
			es模块化的复习
		
		请求获取数据

		展示数据  注意table展示数据的东西


day02

	
    增加

	1、实现静态页面  dialog嵌套form表单
		dialog有一个动态的数据决定dialog的显式和隐藏（布尔值）:visible.sync
		
		form当中 ：model=对象 指定收集的数据最终放在哪  
		form-item当中  是收集数据的每一项  每一项都可以有label指定这一项名称，label-width="100px"指定名称宽度
			  每一项当中都可以对应收集数据，收集的数据一般都是放在我们指定的对象当中

		upload：我们拷贝官方网站的上传头像那个，html  css  js都要拷贝过来

		

	2、实现添加动态交互和数据收集
		
		点击添加按钮实现 添加的对话框显示
		
		收集数据到指定的地方
			1、收集input的数据tmName，这个已经可以收集了 ，v-model
			2、收集upload的数据logoUrl  这个数据收集需要看拷贝过来的那些东西				
			    先请求上传到后端   后端返回真实路径    前端收集返回的真实路径

		添加收集完数据之后，没有确定发请求，而是点击取消，再次点击添加数据依然存在，这个bug需要解决
			就是点击添加按钮弹出dialog的时候，要把原本的tmForm当中的数据清空一下
			
    修改
	
	1、实现修改的静态页面，和添加的页面共用同一个，不需要写


	2、实现修改动态交互和数据收集
		点击修改按钮实现，修改的对话框显示（其实是同一个），只是这次要带上相应的数据进行初始化展示
		
		收集数据在添加当中已经搞定，不需要再次写收集功能

		修改数据直接把row赋值给tmform，会影响显示的数据，因此需要使用拷贝解决，让row和tmform不能是同一个对象



    发请求
	点击确定按钮去发请求添加品牌或者修改品牌
	1、获取收集好的参数数据
	2、整理收集好的参数数据
	3、发送请求
	4、成功干啥
	5、失败干啥


    删除
	使用的是messageBox做的，带确认的那个
	在点击确定的逻辑当中，我们需要发请求删除
	成功需要提示，然后重新获取数据（是获取哪页的要根据数据条数来决定）
	失败提示就好了


四、平台属性管理增删改查业务逻辑
    
    1、平台属性相关的api接口请求函数

    2、实现我们的页面功能：两个el-card 上面的card放的是三级分类组件，下面的card还没开始做

    3、CategorySelector全局组件的静态实现
	根据官网form当中的行内form修改

    4、CategorySelector全局组件的动态实现 
	写三级分类接口请求函数
	一上来第一个分类就要有数据，所以我们要mouted发请求拿数据给第一项分类去遍历展示数据
	选中了第一项当中的某个分类，才会发请求拿第二项的数据进行遍历展示
	选中了第二项当中的某个分类，才会发请求拿第三项的数据进行遍历展示
	选中第一项需要清空第23项的数据
	选中第二项需要清空第三项的数据
	选中123项都要和父组件通信，把id传递到父组件当中


	父组件当中判断level保存三个id
	在父组件获取子组件传递过来的数据，保存3级id的时候需要发请求获取属性数据
	在父组件获取子组件传递过来的数据，保存1级id的时候需要清空父组件的23级id及属性列表数据
	在父组件获取子组件传递过来的数据，保存2级id的时候需要清空父组件的3级id及属性列表数据

day03

    5、属性列表页（查）
    	
    	属性列表的静态页面实现
		一个按钮和一个table

    	属性列表的动态实现
		动态数据已经可以获取到

	展示属性列表数据
	attrList:[
		{
			id:100
			attrName:'运行内存'，
			attrValueList:[
				{
					id:2
					attrId:100
					valueName:'8g'
				}

			]

		},

	]
	
	展示table数据的时候注意展示属性值列表那项，数据结构要清楚，使用的是vfor和作用域插槽

	最后展示操作的按钮，使用的是之前封装的HintButton，把之前的a标签改为el-tooltip


    6、属性的增
	实现增加属性的静态页面
		增加属性的静态页面和修改是一样的
		增加属性的静态页面和列表页都是在第二个card当中，但是同时只能显示一个
			用两个div，一个div包含列表页相关的，另外一个包含添加和修改的页面
			定义数据isShowList控制card当中显示的是哪一个 必须使用vshow
		增加属性的静态页面包含:一个行内form  两个按钮  一个table  两个按钮  尝试自己动手写写


	实现增加属性页面的动态交互（点击按钮切换：确定按钮和取消按钮）
		点击列表页面的添加属性按钮，切换到添加页面，就是把isShowList改为false
		点击添加页面的取消按钮，再切换回到列表页面，就是把isShowList改为true
		完成列表页添加属性按钮和添加页面的添加属性值按钮的可操作性 disabled

	
	实现增加属性动态收集数据
		收集属性名称： 已经做到了，因为我们使用的是v-model

		收集属性值列表：
			添加属性的属性值列表，一上来是一个空数组
			我们使用table在展示我们的属性值列表，但是一上来我们没有属性值，所以table里面没数据
			当我们添加属性值的时候
				1、我们是在属性值的列表（数组）当中添加一个属性值对象，只不过这个属性值对象所有的属性都是空的
					只是为了让table当中出现一行（一个输入框），在占位用的

				2、当出现了输入框之后，用户是要去输入新添的属性值名称，当用户输入了以后，我们才真正的收集到
					刚才添加的属性值对象当中，形成真正的属性值对象

				3、当用户失去焦点或者回车的时候，这个属性值对象才算完成收集

				4、当用户添加完成，点击取消再次点击添加原来的数据还在的bug以及用户收集剩余的categoryId和categoryLevel
					当用户点击添加按钮的时候，情况收集的对象，同时收集剩余的categoryId和categoryLevel


     7、属性的修改
	实现属性修改的静态页面
		和属性的添加用的是同一个静态页面，不需要再去写

	实现修改属性动态交互
		点击修改按钮，切换到修改的页面，并且把当前的数据row带上		

	实现修改属性数据收集
		和属性添加收集是一样的，不需要再写


	
     8、属性值的模式添加（添加属性和修改属性是一样的）

	一个属性值要不是新添加的，要不是已经存在的，新添加属性值显示input，已经存在的属性值显示span，而且可以切换，证明每个属性值都
		有两个模式，这两个模式叫编辑模式和查看模式
	
	
	给每个属性值对象添加模式标识数据，用于确定这个属性值当前是input还是span
		对于添加每个属性值的时候，都添加一个属性isEdit：true，代表添加的属性值是编辑模式
		在修改属性的时候，遍历每个已有的属性值对象都添加一个属性isEdit = false,这里必须使用$set才能响应式
		上面我们的表格当中不能直接写死是一个input，每个属性值根据isEdit决定是input还是span  使用vif


     9、属性值模式的切换
		在input上我们需要添加失去焦点和回车事件，切换为查看模式，本质就是修改isEdit属性值
			input在切换为span之前要判断数据合法性
				1、数据是不是空的
				2、除了自己以外，输入的数据是不是和其它的属性值名称重复
		
		在span上我们需要添加点击事件，切换为编辑模式，本质就是修改isEdit属性值	


	
    10、解决input输入框大的问题、span点击区域过小的问题、自动获取焦点的问题

		解决input输入框大的问题   直接添加size = "mini"
		span点击区域过小的问题    直接把span变为block  宽高100%
		自动获取焦点的问题
			什么时候要自动获取焦点  
				1、添加新属性值的时候  2、从span变为input的时候
			上面的html el-input需要添加ref  ref的值是各自的下标  $index

			在toEdit当中，添加自动获取焦点的逻辑 
				this.$nextTick(() => {
        				this.$refs[index].focus()
      				}) 
			在addAttrValue当中，添加自动获取焦点的逻辑
				this.$nextTick(() => {
        				this.$refs[this.attrForm.attrValueList.length - 1].focus()
      				})
			
			this.$nextTick的使用，必须要会


    11、删除属性值的操作
		删除属性值不是删除属性，不需要发请求，只需要从attrForm.attrValueList把对应的属性值对象删除就好了
		
		用到气泡确认框，用法参考官网
		
		气泡确认框点击确定按钮的事件名称叫 onConfirm 不是confirm  官网写错了



	

	

		
			
		

	
		  			
		
		
				
   	 
   	
	
        
	
	
	
